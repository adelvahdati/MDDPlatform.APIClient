@page "/FindModels"
@inject IProblemDomainService _problemDomainService;
@inject IDomainService domainService;
@inject ILanguageService languageService;

<Fields>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.Is2">Problem Domains</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
                <Select TValue="Guid" SelectedValueChanged="@((args) => SelectProblemDomain(args))">
                    <SelectItem Value="@(Guid.Empty)">-- Select Problem Domain --</SelectItem>
                    @if (problemDomainOptions != null)
                    {
                        @foreach (var item in problemDomainOptions)
                        {
                            <SelectItem Value="@item.Id" TValue="Guid">@item.Title</SelectItem>
                        }
                    }
                </Select>
        </FieldBody>
    </Field>
</Fields>
<Fields>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.Is2">Sub Domains</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
                <Select TValue="Guid" SelectedValueChanged="@((args) => SelectSubDomain(args))">
                    <SelectItem Value="@(Guid.Empty)">-- Select Sub Domain --</SelectItem>
                    @if (subDomainOptions != null)
                    {
                        @foreach (var item in subDomainOptions)
                        {
                            <SelectItem Value="@item.Id" TValue="Guid">@item.Name</SelectItem>
                        }
                    }
                </Select>
        </FieldBody>
    </Field>
</Fields>
<Fields>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.Is2">Name</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit Placeholder="Enter the name of model" @bind-Text="@modelName"></TextEdit>
        </FieldBody>
    </Field>
</Fields>
<Fields>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.Is2">Tag</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit Placeholder="Assign a tag to the model" @bind-Text="@modelTag"></TextEdit>
        </FieldBody>
    </Field>
</Fields>
<Fields>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.Is2">Type</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <Select TValue="string" SelectedValueChanged="@((args) => SelectModelType(args))">
                <SelectItem TValue="string" Value="@(string.Empty)">Select Abstraction Level</SelectItem>
                <SelectItem TValue="string" Value="@("CIM")">CIM</SelectItem>
                <SelectItem TValue="string" Value="@("PIM")">PIM</SelectItem>
                <SelectItem TValue="string" Value="@("PSM")">PSM</SelectItem>
                <SelectItem TValue="string" Value="@("Code")">Code</SelectItem>
            </Select>
        </FieldBody>
    </Field>
</Fields>
<Fields>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.Is2">Language</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <Select TValue="string" SelectedValueChanged="@((args) => SelectModelLanguage(args))">
                <SelectItem TValue="string" Value="@(string.Empty)">Select Model Language</SelectItem>
                @if (languages != null)
                {
                    @foreach (var item in languages)
                    {
                        <SelectItem Value="@item.Id.ToString()" TValue="string">@item.Name - @item.Version</SelectItem>
                    }
                }
            </Select>
        </FieldBody>
    </Field>
</Fields>
<Fields>
    <Field Horizontal>
        <FieldBody>
            <Button class="btn btn-primary" Color="Color.Primary" @onclick="FindModelsAsync">Search</Button>
        </FieldBody>
    </Field>
</Fields>
@if (models == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Table>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Tag</TableHeaderCell>
                <TableHeaderCell>Type</TableHeaderCell>
                <TableHeaderCell>Level</TableHeaderCell>
                <TableHeaderCell>Language</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var model in models)
            {
                <TableRow>
                    @if(model.Language.IsBuiltin)
                    {
                        <TableRowCell>
                            <a href="@(string.Format(builtin_model_url,model.Id))">
                                @model.Name
                            </a>
                        </TableRowCell>
                    }else
                    {
                        <TableRowCell>
                            <a href="@(string.Format(base_url,model.Id))">
                                @model.Name
                            </a>
                        </TableRowCell>
                    }
                    <TableRowCell>@model.Tag</TableRowCell>
                    <TableRowCell>@model.Type</TableRowCell>
                    <TableRowCell>@model.Level</TableRowCell>
                    <TableRowCell>@model.Language.Name</TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>
}

@code
{
    private List<ProblemDomainDto>? problemDomainOptions = null;
    private IEnumerable<SubDomainDto>? subDomainOptions = null;
    private Guid SelectedProblemDomainId;
    private Guid SelectedDomainId;
    private Guid SelectedLanguageId;

    private ModelFilterDto filter = new();
    private string base_url = "/DomainSpecificModel/{0}";
    private string builtin_model_url = "/BuiltinModel/{0}";
    private List<ModelDto>? models = null;
    private string modelName = string.Empty;
    private string modelTag = string.Empty;
    private int level = 1;
    private List<LanguageDto>? languages = null;
    

    protected override async Task OnInitializedAsync()
    {
        filter = new();
        await GetLanguages();
        await GetProblemDomainsAsync();
        StateHasChanged();
    }

    private async Task GetProblemDomainsAsync()
    {
        var items = await _problemDomainService.GetProblemDomainsAsync();
        if (items == null)
            problemDomainOptions = new();
        else
            problemDomainOptions = items.ToList();
    }
    private async Task GetLanguages()
    {
        var items = await languageService.GetLanguagesAsync();
        if (items == null)
            languages = new List<LanguageDto>();
        else
            languages = items.ToList();
    }
    private async Task SelectProblemDomain(Guid problemDomainId)
    {
        SelectedProblemDomainId = problemDomainId;
        if(problemDomainId!=Guid.Empty)
        {
            subDomainOptions = await _problemDomainService.GetSubDomainsAsync(problemDomainId);
            filter.SetProblemDomain(problemDomainId);
        }else
        {
            subDomainOptions = null;
            filter.ResetProblemDomain();
        }
        filter.ResetDomain();
        StateHasChanged();
    }
    private void SelectSubDomain(Guid domainId)
    {
        if(domainId!=Guid.Empty)
            filter.SetDomain(domainId);
        else
            filter.ResetDomain();
    }
    private void SelectModelType(string type)
    {
        if(!string.IsNullOrEmpty(type))
            filter.SetType(type);
        else
            filter.ResetType();
    }
    private void SelectModelLanguage(string languageId)
    {
        if(string.IsNullOrEmpty(languageId))
            filter.ResetLanguage();
        else
        {
            Guid id;
            var result = Guid.TryParse(languageId,out id);
            if(result)
                filter.SetLanguage(id);
            else
                filter.ResetLanguage();
                        
        }            
    }
    private async Task FindModelsAsync()
    {
        if(!string.IsNullOrEmpty(modelName))
            filter.SetName(modelName);
        else
            filter.ResetName();
        
        if(!string.IsNullOrEmpty(modelTag))
            filter.SetTag(modelTag);
        else
            filter.ResetTag();        

        models = await domainService.FindModelsAsync(filter);
        StateHasChanged();
    }
}
